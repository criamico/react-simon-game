{"version":3,"sources":["webpack:///./src/app.js","webpack:///./src/components/board.jsx","webpack:///./src/components/color-button.jsx","webpack:///./src/assets/media/simonSound1.mp3","webpack:///./src/assets/media/simonSound2.mp3","webpack:///./src/assets/media/simonSound3.mp3","webpack:///./src/assets/media/simonSound4.mp3","webpack:///./src/components/controls.jsx","webpack:///./src/components/toggle.jsx","webpack:///./src/components/control-button.jsx","webpack:///./src/components/display.jsx","webpack:///./src/engine.js"],"names":["_react","__webpack_require__","_reactDom","_board","render","_react2","default","createElement","_board2","document","getElementById","_colorButton","_controls","_engine","defaultState","isOn","isStarted","isStrict","isTurnWrong","turnCounter","inputCounter","simonSequence","userSequence","isClickAutomatic","hasWon","timers","Board","props","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","onClickOn","setState","clearTimeouts","onClickStart","state","showSequence","resetAll","onClickStrict","resetTurn","length","map","t","clearTimeout","cb","readInput","id","_this$state","tempUserSequence","push","onInputCounterUpdate","_this$state2","isSequenceCorrect","Eng","isUserSequenceCorrect","setTimeout","resetStrict","currSequence","currentSequence","timeoutIterate","seq","i","timerArr","timer","playColorKey","color","clickButton","getDisplayText","_this$state3","toString","displayName","refCallbacks","G","refBtnGreen","R","refBtnRed","B","refBtnBlue","Y","refBtnYellow","randomSequence","generateSequence","click","_this2","_state","Fragment","className","_controls2","displayString","BUTTONS","btn","_colorButton2","key","inputRef","el","href","React","Component","_propTypes","_simonSound","_simonSound3","_simonSound5","_simonSound7","ColorButton","getStyle","isActive","active","playSound","sounds","simonSound1","simonSound2","simonSound3","simonSound4","sound","Audio","play","onClick","propTypes","PropTypes","string","func","ref","module","exports","p","_toggle","_controlButton","_display","Controls","bool","_props","_display2","label","text","_controlButton2","labelActive","labelInactive","_toggle2","PureComponent","Toggle","ControlButton","Display","engine","getRandomInRange","min","max","truncMin","Math","ceil","truncMax","floor","random","moves","Array","from","keys","sequence","turnsCount","slice"],"mappings":"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","file":"bundle.026564790d8436bb7b6a.js","sourcesContent":["import React from 'react';\nimport {render} from 'react-dom';\nimport Board from './components/board.jsx';\n\nrender(<Board/>, document.getElementById('app'));\n","import React from 'react';\nimport ColorButton from './color-button.jsx';\nimport Controls from './controls.jsx';\nimport Eng from '../engine';\nimport '../assets/styles/main.scss';\n\nconst defaultState = {\n  isOn: false,\n  isStarted: false,\n  isStrict: false,\n  isTurnWrong: false,\n  turnCounter: 0,\n  inputCounter: 0,\n  simonSequence: [],\n  userSequence: [],\n  isClickAutomatic: false,\n  hasWon: false,\n  timers: []\n};\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    Board.displayName = 'Board';\n\n    this.state = defaultState;\n\n    this.refCallbacks = {\n      'G': this.refBtnGreen,\n      'R': this.refBtnRed,\n      'B': this.refBtnBlue,\n      'Y': this.refBtnYellow\n    };\n  }\n  componentDidMount() {\n    const randomSequence = Eng.generateSequence();\n    this.setState({simonSequence: randomSequence});\n  }\n\n  // manage state of 'on' button\n  onClickOn = (isOn) => {\n    this.setState({ isOn });\n\n    if (!isOn) {\n      this.clearTimeouts();\n      this.setState(defaultState);\n    }\n  }\n\n  // manage state of 'start' button\n  onClickStart = (isStarted) => {\n    const { isOn } = this.state;\n    this.setState({ isStarted });\n\n    // call sequence for the first iteration\n    if (isOn && isStarted) {\n      this.showSequence();\n    }\n\n    if (!isStarted) {\n      this.resetAll();\n    }\n  }\n\n  // manage 'strict mode' button\n  onClickStrict = (isStrict) => {\n    this.setState({ isStrict });\n  }\n\n  // Call this function at the beginning of each user turn\n  // to reset the variables\n  resetTurn = () => {\n    this.setState({\n      inputCounter: 0,\n      userSequence: [],\n      isTurnWrong: false\n    });\n  }\n\n  clearTimeouts = () => {\n    this.state.timers.length > 0 && this.state.timers.map(t => clearTimeout(t));\n  }\n\n  resetAll = (cb) => {\n    this.clearTimeouts();\n    this.setState(\n      {\n        turnCounter: 0,\n        inputCounter: 0,\n        userSequence: [],\n        isClickAutomatic: false,\n        hasWon: false,\n        isTurnWrong: false,\n        timers: []\n      },\n      cb\n    );\n  }\n\n  // read user input and do your thing!\n  readInput = (id) => {\n    const {\n      inputCounter,\n      isOn,\n      isStarted,\n      userSequence,\n      isClickAutomatic\n    } = this.state;\n\n    // if the user input is correct, update state\n    // before updating, check that all the flags are in correct state\n    if (isOn && isStarted && !isClickAutomatic) {\n      // the following variable is ONLY used to update the state\n      let tempUserSequence = userSequence;\n      tempUserSequence.push(id);\n      this.setState(\n        {\n          userSequence: tempUserSequence,\n          inputCounter: inputCounter + 1\n        },\n        this.onInputCounterUpdate\n      );\n    }\n  }\n\n  onInputCounterUpdate = () => {\n    const {\n      simonSequence,\n      inputCounter,\n      turnCounter,\n      userSequence\n    } = this.state;\n\n    // Take the correct counter value of inputCounter\n    const isSequenceCorrect = Eng.isUserSequenceCorrect(\n      simonSequence,\n      userSequence,\n      inputCounter - 1\n    );\n\n    // when the inputCounter reaches the main counter\n    // and the input sequence is correct, update\n    if (isSequenceCorrect){\n      // check if user won\n      if (userSequence.length === 20) {\n        this.setState({ hasWon: true });\n        // console.log('you won!');\n        // wait three seconds and reset everything\n        setTimeout(() => {\n          this.resetAll();\n        }, 3000);\n      }\n      if (inputCounter - 1 === turnCounter) {\n        this.setState(\n          { turnCounter: turnCounter + 1 },\n          this.showSequence\n        );\n        // PS the iteration should be done here\n        // instead it happens on the callback for resetAll (showSequence)\n        // to ensure that turnCounter is updated\n      }\n    } else {\n      // in this case we don't increment the counter\n      // but we show again the sequence\n      this.setState(\n        { isTurnWrong: true },\n        this.resetStrict\n      );\n    }\n  }\n\n  resetStrict = () => {\n    // if in strict mode, when wrong reset all and start over;\n    if (this.state.isStrict)\n      setTimeout(() => {\n        this.resetAll(this.showSequence);\n      }, 3000);\n  }\n\n  // Callback invoked immediately after update of turnCounter.\n  // the iteration on the buttons has to be done here\n  showSequence = () => {\n    const currSequence = Eng.currentSequence(\n      this.state.simonSequence, this.state.turnCounter);\n\n    // console.log('sequence to show', currSequence);\n    this.resetTurn();\n\n    // call recursive function to set timeouts,\n    this.timeoutIterate(currSequence, 0, this.state.timers);\n  }\n\n  // recursive function, plays the buttons sequentially\n  timeoutIterate = (seq, i, timerArr) => {\n    if (i < seq.length) {\n      const timer = setTimeout(() => {\n        this.playColorKey(seq[i]);\n        this.timeoutIterate(seq, i + 1, timerArr);\n      }, 1500);\n      timerArr.push(timer);\n    }\n  }\n\n  // set a timeout and then play the key to show the user the color\n  playColorKey = (color) => {\n    setTimeout(() => {\n      this.clickButton(color);\n    }, 2500);\n  }\n\n  // helper function needed to animate the correct button by using refs\n  clickButton(id) {\n    // set flag that marks a click as done by the pc\n    this.setState({isClickAutomatic: true});\n\n    this.refCallbacks[id].click();\n    // reset flag\n    this.setState({isClickAutomatic: false});\n  }\n\n  getDisplayText = () => {\n    const { turnCounter, hasWon, isTurnWrong } = this.state;\n    if ( turnCounter === 0 ){\n      return '--';\n    } else if (turnCounter > 0) {\n      if (hasWon) return 'WIN!';\n      if (isTurnWrong) return '!!';\n\n      return turnCounter.toString();\n    }\n  }\n\n  render() {\n    const { isOn, isStarted, isStrict } = this.state;\n\n    return (\n      <React.Fragment>\n        <div className=\"simon\">\n          <Controls\n            isOn={isOn}\n            isStarted={isStarted}\n            isStrict={isStrict}\n            onClickOn={this.onClickOn}\n            onClickStart={this.onClickStart}\n            onClickStrict={this.onClickStrict}\n            displayString={this.getDisplayText()}\n          />\n          { Eng.BUTTONS.map(btn => <ColorButton\n            key={btn}\n            id={btn}\n            readInput={this.readInput}\n            inputRef={el => this.refCallbacks[btn] = el}\n          />\n          )}\n        </div>\n        <div className='attribution'>\n          <a href='criamico.github.io'>Criamico</a> - 2018\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component }  from 'react';\nimport PropTypes from 'prop-types';\nimport simonSound1 from '../assets/media/simonSound1.mp3';\nimport simonSound2 from '../assets/media/simonSound2.mp3';\nimport simonSound3 from '../assets/media/simonSound3.mp3';\nimport simonSound4 from '../assets/media/simonSound4.mp3';\n\nclass ColorButton extends Component {\n  constructor(props) {\n    super(props);\n    ColorButton.displayName = 'ColorButton';\n\n    ColorButton.propTypes = {\n      id: PropTypes.string,\n      readInput: PropTypes.func,\n      inputRef: PropTypes.func\n    };\n    this.state = {\n      active: false\n    };\n  }\n\n  getStyle = (id) => {\n    const color = {\n      'G': 'green',\n      'R': 'red',\n      'B': 'blue',\n      'Y': 'yellow'\n    };\n    const isActive = this.state.active ? 'active ': '';\n    return `${'btn ' + isActive + color[id]}`;\n  }\n\n  playSound = (id) => {\n    const sounds = {\n      'G': simonSound1,\n      'R': simonSound2,\n      'B': simonSound3,\n      'Y': simonSound4\n    };\n\n    const sound = new Audio(sounds[id]);\n    sound.play();\n  }\n\n  // set a timeout to simulate a long click\n  onClick = () => {\n    this.props.readInput(this.props.id);\n    this.playSound(this.props.id);\n    this.setState({active: !this.state.active});\n\n    setTimeout(() => {\n      this.setState({active: !this.state.active});\n    }, 1000);\n  }\n\n  render() {\n    const { id } = this.props;\n\n    return (\n      <button\n        id={id}\n        className={this.getStyle(id)}\n        onClick={this.onClick}\n        ref={this.props.inputRef}\n      />\n    );\n  }\n}\n\nexport default ColorButton;\n","module.exports = __webpack_public_path__ + \"assets/media/simonSound1.mp3\";","module.exports = __webpack_public_path__ + \"assets/media/simonSound2.mp3\";","module.exports = __webpack_public_path__ + \"assets/media/simonSound3.mp3\";","module.exports = __webpack_public_path__ + \"assets/media/simonSound4.mp3\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Toggle from './toggle.jsx';\nimport ControlButton from './control-button.jsx';\nimport Display from './display.jsx';\n\nclass Controls extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    Controls.displayName = 'Controls';\n\n    Controls.propTypes = {\n      isOn: PropTypes.bool,\n      isStarted: PropTypes.bool,\n      isStrict: PropTypes.bool,\n      displayString: PropTypes.string,\n      onClickOn: PropTypes.func,\n      onClickStart: PropTypes.func,\n      onClickStrict: PropTypes.func\n    };\n  }\n\n  render() {\n    const { isOn, isStarted, displayString, isStrict, onClickOn, onClickStrict,\n      onClickStart } = this.props;\n\n    return (\n      <div className='ctrls'>\n        <div className='brand'>React Says</div>\n        <div className='container'>\n          <Display\n            className='display'\n            label='COUNT'\n            text={displayString}\n          />\n          <ControlButton\n            className='red'\n            isActive={isOn? isStarted : false}\n            onClick={onClickStart}\n            labelActive='STOP'\n            labelInactive='START'\n          />\n          <ControlButton\n            className='yellow'\n            isActive={isStrict}\n            onClick={onClickStrict}\n            labelActive='STRICT'\n            labelInactive='STRICT'\n          />\n        </div>\n        <Toggle\n          onClick={onClickOn}\n          isOn={isOn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Toggle extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    Toggle.displayName = 'Toggle';\n\n    Toggle.propTypes = {\n      isOn: PropTypes.bool,\n      onClick: PropTypes.func\n    };\n  }\n\n  onClick = () => {\n    this.props.onClick(!this.props.isOn);\n  }\n\n  render() {\n    return <div className=\"btn-div\">\n      <div className='toggle-button'>\n        <div\n          className={`toggle ${ this.props.isOn ? 'on' : 'off'}`}\n          onClick={this.onClick}\n        />\n      </div>\n      <label>{`${this.props.isOn ? 'ON' : 'OFF'}`}</label>\n    </div>;\n  }\n}\n\nexport default Toggle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ControlButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    ControlButton.displayName = 'ControlButton';\n\n    ControlButton.propTypes = {\n      className: PropTypes.string,\n      isActive: PropTypes.bool,\n      onClick: PropTypes.func,\n      labelActive: PropTypes.string,\n      labelInactive: PropTypes.string\n    };\n  }\n\n  onClick = () => {\n    this.props.onClick(!this.props.isActive);\n  }\n\n  render() {\n    const { isActive, className, labelActive, labelInactive } = this.props;\n    return (\n      <div className=\"btn-div\">\n        <button\n          className={`btn-round ${className} ${ isActive ? 'pressed' : ''}`}\n          onClick= {this.onClick}\n        />\n        <label>{`${ isActive ? labelActive : labelInactive}`}</label>\n      </div>\n    );\n  }\n}\n\nexport default ControlButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Display extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    Display.displayName = 'Display';\n\n    Display.propTypes = {\n      text: PropTypes.string,\n      className: PropTypes.string,\n      label: PropTypes.string\n    };\n  }\n\n  render() {\n    const { text, className, label } = this.props;\n    return (\n      <div className=\"btn-div\">\n        <p className={className}>\n          { text }\n        </p>\n        <label>{ label }</label>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","let engine = {\n  BUTTONS:  ['G', 'R', 'B', 'Y'],\n\n  getRandomInRange: function(min, max) {\n    const truncMin = Math.ceil(min);\n    const truncMax = Math.floor(max);\n    return Math.floor(Math.random() * (truncMax - truncMin)) + truncMin;\n  },\n\n  // generate an array of strings having the sequence for the user to play\n  generateSequence: function() {\n    const moves = Array.from(Array(20).keys());\n    return moves.map(() => this.BUTTONS[engine.getRandomInRange(0, 4)]);\n  },\n\n  currentSequence: function(sequence, turnsCount) {\n    return (turnsCount === 0)\n      ? sequence[0]\n      : sequence.slice(0, turnsCount + 1);\n  },\n\n  // check correctness of user sequence at current turn\n  isUserSequenceCorrect: function(\n    simonSequence, userSequence, turnsCount) {\n    return this.currentSequence(userSequence, turnsCount).toString() ===\n        this.currentSequence(simonSequence, turnsCount).toString();\n  },\n\n  hasWon: function(simonSequence, userSequence) {\n    return simonSequence === userSequence;\n  }\n};\n\nmodule.exports = engine;\n"],"sourceRoot":""}